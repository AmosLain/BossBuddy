-- Run this in Supabase SQL Editor to automatically sync auth users to your database

-- Create a function to handle new user signups
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.users (id, email, plan, created_at, updated_at)
  VALUES (
    new.id,
    new.email,
    'free',
    now(),
    now()
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a trigger to call the function
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Also create a function to sync existing auth users (run once)
CREATE OR REPLACE FUNCTION sync_existing_auth_users()
RETURNS void AS $$
BEGIN
  INSERT INTO public.users (id, email, plan, created_at, updated_at)
  SELECT 
    id,
    email,
    'free',
    created_at,
    now()
  FROM auth.users
  WHERE id NOT IN (SELECT id FROM public.users);
END;
$$ LANGUAGE plpgsql;

-- Run the sync function
SELECT sync_existing_auth_users();

-- Optional: Update user metadata when they update their profile
CREATE OR REPLACE FUNCTION public.handle_user_update()
RETURNS trigger AS $$
BEGIN
  UPDATE public.users
  SET 
    email = new.email,
    updated_at = now()
  WHERE id = new.id;
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for updates
CREATE TRIGGER on_auth_user_updated
  AFTER UPDATE ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_user_update();