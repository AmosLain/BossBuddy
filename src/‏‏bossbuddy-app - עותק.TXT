// src/bossbuddy-app.tsx
import React, { useState, useEffect } from 'react';
import { Send, Copy, Download, Sun, Moon, Sparkles, ChevronRight, Briefcase, TrendingUp, Users, Lock, History, FileText, Globe, BarChart3, ArrowRight, X } from 'lucide-react';
import { supabase, trackRewrite, checkDailyUsage } from './lib/supabase';

const BossBuddy = ({ userId, userEmail }) => {
  const [darkMode, setDarkMode] = useState(false);
  const [message, setMessage] = useState('');
  const [tone, setTone] = useState('formal');
  const [rewrittenMessage, setRewrittenMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const [dailyUsage, setDailyUsage] = useState(0);

  // Load user's daily usage count
  useEffect(() => {
    checkDailyUsage(userId).then(count => setDailyUsage(count));
  }, [userId]);

  const handleRewrite = async () => {
    setLoading(true);
    // Call your rewrite logic (e.g., via OpenAI) here...
    // After getting result, log and update state:
    // await trackRewrite(userId, message, rewritten, tone);
    // setRewrittenMessage(rewritten);
    setTimeout(() => {
      const fake = `${message} (rewritten in ${tone} tone)`;
      trackRewrite(userId, message, fake, tone);
      setRewrittenMessage(fake);
      setLoading(false);
    }, 1000);
  };

  return (
    <div
      className={`min-h-screen transition-colors duration-300 ${
        darkMode
          ? 'bg-gray-900 text-white'
          : 'bg-gradient-to-br from-blue-50 via-white to-purple-50 text-black'
      }`}
    >
      <div className="container mx-auto px-4 sm:px-6 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">BossBuddy</h1>
          <button onClick={() => supabase.auth.signOut()} className="px-3 py-1 bg-gray-300 rounded">Sign Out</button>
        </div>
        <div className="flex justify-between items-center mb-4">
          <div>Signed in as: {userEmail}</div>
          <button onClick={() => setDarkMode(!darkMode)} className="p-2">
            {darkMode ? <Sun /> : <Moon />}
          </button>
        </div>
        <p className="mb-4">~{dailyUsage} today</p>

        <div className="grid grid-cols-3 gap-4 mb-6">
          <button onClick={() => setMessage('I need to take a sick day')} className="px-4 py-2 bg-white shadow rounded">Time Off</button>
          <button onClick={() => setMessage('I’m running late due to traffic')} className="px-4 py-2 bg-white shadow rounded">Attendance</button>
          <button onClick={() => setMessage('Can we reschedule our meeting?')} className="px-4 py-2 bg-white shadow rounded">Meetings</button>
          <button onClick={() => setMessage('I’d like to request time off next week')} className="px-4 py-2 bg-white shadow rounded">Request Time Off</button>
          <button onClick={() => setMessage('I need more time to complete this project')} className="px-4 py-2 bg-white shadow rounded">Deadlines</button>
          <button onClick={() => setMessage('I need help with this task')} className="px-4 py-2 bg-white shadow rounded">Support</button>
        </div>

        <div className="mb-4">
          <textarea
            value={message}
            onChange={e => setMessage(e.target.value)}
            placeholder="Your Message"
            className="w-full p-2 border rounded"
          />
          <div className="mt-2 flex space-x-2">
            {['formal','friendly','assertive','apologetic'].map(t => (
              <button
                key={t}
                onClick={() => setTone(t)}
                className={`px-3 py-1 rounded ${tone===t ? 'bg-blue-500 text-white' : 'bg-white border'}`}
              >
                {t}
              </button>
            ))}
          </div>
        </div>

        <button
          onClick={handleRewrite}
          className="px-6 py-2 bg-blue-600 text-white rounded"
          disabled={loading || !message}
        >
          {loading ? 'Rewriting...' : 'Rewrite Message'}
        </button>

        {rewrittenMessage && (
          <div className="mt-6 bg-white p-4 rounded shadow">
            <p>{rewrittenMessage}</p>
            <div className="mt-2 flex space-x-2">
              <button
                onClick={() => { navigator.clipboard.writeText(rewrittenMessage); setCopied(true); }}
                className="px-3 py-1 bg-green-500 text-white rounded"
              >
                {copied ? 'Copied!' : <Copy />}
              </button>
              <button
                onClick={() => {/* implement download */}}
                className="px-3 py-1 bg-gray-200 rounded"
              >
                <Download />
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Global styles (no jsx attribute) */}
      <style>{`
        @keyframes fade-in { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .animate-fade-in { animation: fade-in 0.5s ease-out; }
        .line-clamp-2 { overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; }
      `}</style>
    </div>
  );
};

export default BossBuddy;
